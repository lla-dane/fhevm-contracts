// SPDX-License-Identifier: BSD-3-Clause-Clear
pragma solidity ^0.8.24;

import { ConfidentialERC20 } from "./ConfidentialERC20.sol";

import "fhevm/lib/TFHE.sol";
import "fhevm/gateway/GatewayCaller.sol";

import { IConfidentialERC20Wrapped } from "./IConfidentialERC20Wrapped.sol";

/**
 * @title             ConfidentialWETH
 * @notice            This contract allows users to wrap/unwrap trustlessly
 *                    ETH (or other native tokens) to ConfidentialERC20 tokens.
 */
abstract contract ConfidentialWETH is ConfidentialERC20, IConfidentialERC20Wrapped, GatewayCaller {
    /// @notice Returned if ETH transfer fails.
    error ETHTransferFail();

    /// @notice Tracks whether the account can move funds.
    mapping(address account => bool isRestricted) public isAccountRestricted;

    /// @notice Tracks the unwrap request to a unique request id.
    mapping(uint256 requestId => UnwrapRequest unwrapRequest) public unwrapRequests;

    /**
     * @notice         Deposit/withdraw ethers (or native tokens).
     * @dev            The name/symbol are autogenerated.
     */
    constructor()
        ConfidentialERC20(string(abi.encodePacked("Encrypted Wrapped Ether")), string(abi.encodePacked("eWETH")))
    {}

    /**
     * @notice         Fallback function calls wrap().
     */
    fallback() external payable {
        wrap();
    }

    /**
     * @notice         Receive function calls wrap().
     */
    receive() external payable {
        wrap();
    }

    /**
     * @notice         Unwrap ConfidentialERC20 tokens to ether.
     * @param amount   Amount to unwrap.
     */
    function unwrap(uint64 amount) public virtual {
        _canTransferOrUnwrap(msg.sender);

        /// @dev Once this function is called, it becomes impossible for the sender to move any token.
        isAccountRestricted[msg.sender] = true;
        ebool canUnwrap = TFHE.le(amount, _balances[msg.sender]);

        uint256[] memory cts = new uint256[](1);
        cts[0] = Gateway.toUint256(canUnwrap);

        uint256 requestId = Gateway.requestDecryption(
            cts,
            this.callbackUnwrap.selector,
            0,
            block.timestamp + 100,
            false
        );

        unwrapRequests[requestId] = UnwrapRequest({ account: msg.sender, amount: amount });
    }

    /**
     * @notice         Wrap ether to an encrypted format.
     */
    function wrap() public payable virtual {
        uint256 amountAdjusted = (msg.value) / (10 ** (18 - decimals()));

        if (amountAdjusted > type(uint64).max) {
            revert AmountTooHigh();
        }

        uint64 amountUint64 = uint64(amountAdjusted);

        _unsafeMint(msg.sender, amountUint64);
        _totalSupply += amountUint64;

        emit Wrap(msg.sender, amountUint64);
    }

    /**
     * @notice            Callback function for the gateway.
     * @param requestId   Request id.
     * @param canUnwrap   Whether it can be unwrapped.
     */
    function callbackUnwrap(uint256 requestId, bool canUnwrap) public virtual onlyGateway {
        UnwrapRequest memory unwrapRequest = unwrapRequests[requestId];
        delete unwrapRequests[requestId];

        if (canUnwrap) {
            _unsafeBurn(unwrapRequest.account, unwrapRequest.amount);
            _totalSupply -= unwrapRequest.amount;

            /// @dev It does a supply adjustment.
            uint256 amountUint256 = unwrapRequest.amount * (10 ** (18 - decimals()));

            /* solhint-disable avoid-call-value*/
            /* solhint-disable avoid-low-level-calls*/
            (bool callSuccess, ) = unwrapRequest.account.call{ value: amountUint256 }("");

            if (!callSuccess) {
                revert ETHTransferFail();
            }

            emit Unwrap(unwrapRequest.account, unwrapRequest.amount);
        } else {
            emit UnwrapFail(unwrapRequest.account, unwrapRequest.amount);
        }

        delete isAccountRestricted[unwrapRequest.account];
    }

    function _canTransferOrUnwrap(address account) internal virtual {
        if (isAccountRestricted[account]) {
            revert CannotTransferOrUnwrap();
        }
    }

    function _transferNoEvent(
        address from,
        address to,
        euint64 amount,
        ebool isTransferable
    ) internal virtual override {
        _canTransferOrUnwrap(from);
        super._transferNoEvent(from, to, amount, isTransferable);
    }

    function _unsafeBurn(address account, uint64 amount) internal {
        euint64 newBalanceAccount = TFHE.sub(_balances[account], amount);
        _balances[account] = newBalanceAccount;
        TFHE.allowThis(newBalanceAccount);
        TFHE.allow(newBalanceAccount, account);
        emit Transfer(account, address(0), _PLACEHOLDER);
    }
}
